// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ZTSportKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import Foundation
import Swift
import ZTCoreKit
import _Concurrency
import _StringProcessing
final public class ZTActivityAnalysis : ZTCoreKit.ZTMappable {
  final public var total: Swift.Int
  final public var stats: ZTSportKit.ZTActivityAnalysis.Stats?
  final public var charts: ZTSportKit.ZTActivityAnalysis.Charts?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
extension ZTSportKit.ZTActivityAnalysis {
  final public class Stats : ZTCoreKit.ZTMappable {
    final public var totalSteps: Swift.Int
    final public var runningSteps: Swift.Int
    final public var walkingSteps: Swift.Int
    final public var speed: Swift.Double
    final public var calories: Swift.Int
    required public init?(map: ZTCoreKit.ZTMap)
    final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
  final public class Charts : ZTCoreKit.ZTMappable {
    final public var totalSteps: [ZTSportKit.ZTActivityAnalysis.Charts.TotalSteps]?
    final public var speed: [ZTSportKit.ZTActivityAnalysis.Charts.Speed]?
    final public var calories: [ZTSportKit.ZTActivityAnalysis.Charts.Calories]?
    final public var steps: [ZTSportKit.ZTActivityAnalysis.Charts.Steps]?
    final public var walkingSpeed: [ZTSportKit.ZTActivityAnalysis.Charts.Speed]?
    final public var runningSpeed: [ZTSportKit.ZTActivityAnalysis.Charts.Speed]?
    required public init?(map: ZTCoreKit.ZTMap)
    final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
}
extension ZTSportKit.ZTActivityAnalysis.Charts {
  final public class TotalSteps : ZTCoreKit.ZTMappable {
    final public var timestamp: Foundation.Date?
    final public var stepsCount: Swift.Int
    final public var walkingStepsCount: Swift.Int
    required public init?(map: ZTCoreKit.ZTMap)
    final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
  public class ChartData : ZTCoreKit.ZTMappable {
    public var timestamp: Foundation.Date?
    public var value: Swift.Int
    required public init?(map: ZTCoreKit.ZTMap)
    public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
  @_inheritsConvenienceInitializers final public class Speed : ZTSportKit.ZTActivityAnalysis.Charts.ChartData {
    required public init?(map: ZTCoreKit.ZTMap)
    override final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
  @_inheritsConvenienceInitializers final public class Calories : ZTSportKit.ZTActivityAnalysis.Charts.ChartData {
    required public init?(map: ZTCoreKit.ZTMap)
    override final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
  @_inheritsConvenienceInitializers final public class Steps : ZTSportKit.ZTActivityAnalysis.Charts.ChartData {
    required public init?(map: ZTCoreKit.ZTMap)
    override final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
}
final public class ZTActivityLeftRightAnalysis : ZTCoreKit.ZTMappable {
  final public var left: ZTSportKit.ZTActivityLeftRightAnalysis.ProgressionAnalysis?
  final public var right: ZTSportKit.ZTActivityLeftRightAnalysis.ProgressionAnalysis?
  final public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
extension ZTSportKit.ZTActivityLeftRightAnalysis {
  final public class ProgressionAnalysis : ZTCoreKit.ZTMappable {
    final public var contactTime: ZTSportKit.ZTTrendValueData<Swift.Double>?
    final public var flightTime: ZTSportKit.ZTTrendValueData<Swift.Double>?
    final public var impactForce: ZTSportKit.ZTTrendValueData<Swift.Double>?
    final public var strikePattern: ZTSportKit.ZTTrendValueData<Swift.String>?
    required public init?(map: ZTCoreKit.ZTMap)
    final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
}
final public class ZTActivityLeftRightTextAnalysis : ZTCoreKit.ZTMappable {
  final public var left: Swift.String
  final public var right: Swift.String
  final public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
final public class ZTActivityRunAnalysis : ZTCoreKit.ZTMappable {
  final public var activityStart: Foundation.Date?
  final public var stats: ZTSportKit.ZTAnalysisStats?
  final public var strike: ZTSportKit.ZTAnalysisStrike?
  final public var strideQualityIndex: ZTSportKit.ZTStrideQualityIndex?
  final public var pronation: ZTSportKit.ZTAnalysisPronation?
  final public var propulsion: ZTSportKit.ZTAnalysisPropulsion?
  final public var strideLength: ZTSportKit.ZTAnalysisValueRecommendations?
  final public var contactTime: ZTSportKit.ZTAnalysisContactTime?
  final public var contactQuality: ZTSportKit.ZTAnalysisContactQuality?
  final public var strideQualityIndexV2: ZTSportKit.ZTStrideQualityIndexV2?
  final public var cadence: ZTSportKit.ZTAnalysisValueRecommendations?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
@available(*, deprecated, message: "Use ZTActivityRunAnalysis")
public class ZTActivitySegmentAnalysis : ZTCoreKit.ZTMappable {
  public var stats: ZTSportKit.ZTAnalysisStats?
  public var strideQualityIndex: ZTSportKit.ZTStrideQualityIndex?
  public var strike: ZTSportKit.ZTAnalysisStrike?
  public var pronation: ZTSportKit.ZTAnalysisPronation?
  public var propulsion: ZTSportKit.ZTAnalysisPronation?
  public var strideLength: ZTSportKit.ZTAnalysisValueRecommendations?
  public var contactTime: ZTSportKit.ZTAnalysisContactTime?
  public var contactQuality: ZTSportKit.ZTAnalysisValueRecommendations?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
extension ZTSportKit.ZTSport {
  final public func startActivity(attributes: [Swift.String : Any], userParameters: ZTSportKit.ZTUserDataParameters? = nil, enableRawData: Swift.Bool = false, samplingMode: ZTCoreKit.ZTSamplingMode? = nil, timeout: Swift.Double = 15, completion: ZTSportKit.ZTActivityResult?)
  final public func stopActivity(timeout: Swift.Double = 30, completion: ZTSportKit.ZTActivityResult?)
  final public func isPendingEmbeddedActivity(completion: @escaping (Swift.Bool, ZTCoreKit.ZTError?) -> Swift.Void)
  final public func pushPendingEmbeddedActivities(completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
}
final public class ZTAnalysisCadence : ZTCoreKit.ZTMappable {
  final public var timestamp: Foundation.Date?
  final public var activitySpeedAvg: Swift.Int
  final public var cadenceAvg: Swift.Int
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public enum ZTAnalysisContactQualityType : Swift.String {
  case unknown
  case low
  case good
  case perfect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
final public class ZTAnalysisContactQuality : ZTCoreKit.ZTMappable {
  final public var left: ZTSportKit.ZTAnalysisContactQualityType?
  final public var right: ZTSportKit.ZTAnalysisContactQualityType?
  final public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
final public class ZTAnalysisContactTime : ZTCoreKit.ZTMappable {
  final public var left: Swift.Double
  final public var right: Swift.Double
  final public var percentDifference: Swift.Double
  final public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
final public class ZTAnalysisImpactForce : ZTCoreKit.ZTMappable {
  final public var left: ZTSportKit.ZTAnalysisImpactForce.ImpactForceType?
  final public var right: ZTSportKit.ZTAnalysisImpactForce.ImpactForceType?
  final public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  public enum ImpactForceType : Swift.String {
    case ok
    case good
    case high
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
extension ZTSportKit.ZTSport {
  final public func isPendingActivity(activityId: Swift.String, completion: @escaping (Swift.Bool, ZTCoreKit.ZTError?) -> Swift.Void)
  final public func pushPendingActivities(completion: @escaping (ZTCoreKit.ZTError?) -> Swift.Void)
  final public func getLastActivityRawData(completion: @escaping ZTCoreKit.ZTBaseResult)
}
public enum ZTAnalysisPronationType : Swift.String {
  case overPronation
  case pronation
  case neutral
  case supination
  case overSupination
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class ZTAnalysisPronation : ZTCoreKit.ZTMappable {
  public var leftType: ZTSportKit.ZTAnalysisPronationType?
  public var rightType: ZTSportKit.ZTAnalysisPronationType?
  public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public enum ZTAnalysisPropulsionType : Swift.String {
  case unknown
  case low
  case good
  case high
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class ZTAnalysisPropulsion : ZTCoreKit.ZTMappable {
  public var left: ZTSportKit.ZTAnalysisPropulsionType?
  public var right: ZTSportKit.ZTAnalysisPropulsionType?
  public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
final public class ZTAnalysisStats : ZTCoreKit.ZTMappable {
  final public var speed: Swift.Double?
  final public var pace: Swift.Double?
  final public var cadence: Swift.Double?
  final public var distance: Swift.Int?
  final public var steps: Swift.Int?
  final public var maxSpeed: Swift.Int?
  final public var maxCadence: Swift.Int?
  final public var maxPace: Swift.Double?
  final public var runningSteps: Swift.Int?
  final public var walkingSteps: Swift.Int?
  final public var calories: Swift.Double
  final public var duration: Swift.Int
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
final public class ZTAnalysisStrike : ZTCoreKit.ZTMappable {
  final public var strikePattern: ZTSportKit.ZTAnalysisStrikePattern?
  final public var impactForce: ZTSportKit.ZTAnalysisImpactForce?
  final public var contactTime: ZTSportKit.ZTAnalysisContactTime?
  final public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
final public class ZTAnalysisStrikePattern : ZTCoreKit.ZTMappable {
  final public var left: ZTSportKit.ZTAnalysisStrikePattern.StrikePatternType?
  final public var right: ZTSportKit.ZTAnalysisStrikePattern.StrikePatternType?
  final public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  public enum StrikePatternType : Swift.String {
    case heal
    case mid
    case fore
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
final public class ZTAnalysisValueRecommendations : ZTCoreKit.ZTMappable {
  final public var value: Swift.Double
  final public var left: Swift.Double
  final public var right: Swift.Double
  final public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
final public class ZTStrideQualityIndexV2 : ZTCoreKit.ZTMappable {
  final public var health: ZTSportKit.ZTStrideQualityIndexV2.Health?
  final public var performance: ZTSportKit.ZTStrideQualityIndexV2.Performance?
  final public var speedDistanceRatio: Swift.Double?
  final public var speedDistanceCategory: ZTSportKit.ZTStrideQualityIndexV2.DistanceCategory?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
extension ZTSportKit.ZTStrideQualityIndexV2 {
  final public class Health : ZTCoreKit.ZTMappable {
    final public var index: Swift.Double?
    final public var bucket: Swift.Int?
    final public var comment: Swift.String?
    final public var recommendations: [Swift.String]?
    final public var spider: ZTSportKit.ZTStrideQualityIndexV2.Spider?
    required public init?(map: ZTCoreKit.ZTMap)
    final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
  final public class Performance : ZTCoreKit.ZTMappable {
    final public var index: Swift.Double?
    final public var bucket: Swift.Int?
    final public var comment: Swift.String?
    final public var recommendations: [Swift.String]?
    final public var spider: ZTSportKit.ZTStrideQualityIndexV2.Spider?
    required public init?(map: ZTCoreKit.ZTMap)
    final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
  final public class Spider : ZTCoreKit.ZTMappable {
    final public var axis: Swift.Int?
    final public var max: Swift.Double?
    final public var points: [ZTSportKit.ZTStrideQualityIndexV2.Points]?
    required public init?(map: ZTCoreKit.ZTMap)
    final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
  final public class Points : ZTCoreKit.ZTMappable {
    final public var label: Swift.String?
    final public var value: Swift.Double?
    final public var previous: Swift.Double?
    required public init?(map: ZTCoreKit.ZTMap)
    final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
  final public class DistanceCategory : ZTCoreKit.ZTMappable {
    final public var name: Swift.String?
    final public var description: Swift.String?
    final public var index: Swift.Int?
    required public init?(map: ZTCoreKit.ZTMap)
    final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
}
@_inheritsConvenienceInitializers final public class ZTSportActivity : ZTCoreKit.ZTActivity {
  override final public func save()
  override public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ZTSportKit.ZTSportActivity {
  public enum Field : Swift.String {
    case chunk
    case activity_type
    case steps_count
    case cadence_avg
    case activity_time
    case proportion_contact_time_avg_R
    case proportion_contact_time_avg_L
    case proportion_double_flight_time_avg_R
    case proportion_double_flight_time_avg_L
    case activity_speed_avg
    case stride_length_avg_R
    case stride_length_avg_L
    case distance
    case prosupi_in_avg_R
    case prosupi_in_avg_L
    case prosupi_out_avg_R
    case prosupi_out_avg_L
    case ratio_strike_forefoot_avg
    case ratio_strike_heel_avg
    case steps_count_walk
    case walking_time
    case step_length_avg
    case proportion_flight_time_avg_R
    case proportion_flight_time_avg_L
    case ratio_strike_midfoot_avg
    case balance_L
    case pace_avg
    case calories
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@_hasMissingDesignatedInitializers final public class ZTSportActivityAttributes : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  final public func encode(from encoder: Swift.Encoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class ZTUserDataParameters {
  public init(bodyWeight: Swift.Int?, bodyHeight: Swift.Int?, shoeSize: Swift.Int?, threadmillSpeed: Swift.Int? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class ZTSportActivitySummary : ZTCoreKit.ZTActivitySummary {
  final public var data: ZTSportKit.ZTSportActivitySummary.Data?
  final public var include: [Swift.String : Any]?
  final public var thumbnail: Swift.String?
  final public var isPhoneless: Swift.Bool
  final public var comments: [ZTCoreKit.ZTActivityComment]?
  final public var attributes: [Swift.String : Any]?
  required public init?(map: ZTCoreKit.ZTMap)
  override final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
extension ZTSportKit.ZTSportActivitySummary {
  final public class Data : ZTCoreKit.ZTMappable {
    final public var chunk: Swift.Int
    final public var stillTime: Swift.Int
    final public var stepsCount: Swift.Int
    final public var cadenceAvg: Swift.Int
    final public var activityTime: Swift.Int
    final public var contactTimeAvgR: Swift.Double
    final public var contactTimeAvgL: Swift.Double
    final public var swingTimeAvgR: Swift.Double
    final public var swingTimeAvgL: Swift.Double
    final public var activitySpeedAvg: Swift.Int
    final public var propulsionSpeedAvgR: Swift.Int
    final public var propulsionSpeedAvgL: Swift.Int
    final public var averagedStrideSpeedAvgR: Swift.Int
    final public var averagedStrideSpeedAvgL: Swift.Int
    final public var distance: Swift.Int
    final public var strideLengthAvgR: Swift.Int
    final public var strideLengthAvgL: Swift.Int
    final public var strideHeightAvgR: Swift.Int
    final public var strideHeightAvgL: Swift.Int
    final public var prosupiInAvgR: Swift.Int
    final public var prosupiInAvgL: Swift.Int
    final public var prosupiMidAvgR: Swift.Int
    final public var prosupiMidAvgL: Swift.Int
    final public var prosupiOutAvgR: Swift.Int
    final public var prosupiOutAvgL: Swift.Int
    final public var footProgressionAngleAvgR: Swift.Int
    final public var footProgressionAngleAvgL: Swift.Int
    final public var propulsionAngleAvgR: Swift.Int
    final public var propulsionAngleAvgL: Swift.Int
    final public var strikeAngleAvgR: Swift.Int
    final public var strikeAngleAvgL: Swift.Int
    final public var twistAvgR: Swift.Int
    final public var twistAvgL: Swift.Int
    final public var proportionStrikeForefootAvgR: Swift.Int
    final public var proportionStrikeForefootAvgL: Swift.Int
    final public var proportionStrikeMidfootAvgR: Swift.Int
    final public var proportionStrikeMidfootAvgL: Swift.Int
    final public var proportionStrikeHeelAvgR: Swift.Int
    final public var proportionStrikeHeelAvgL: Swift.Int
    final public var impactForceAvgR: Swift.Int
    final public var impactForceAvgL: Swift.Int
    final public var legStiffnessAvgR: Swift.Int
    final public var legStiffnessAvgL: Swift.Int
    final public var cushioningAvgR: Swift.Int
    final public var cushioningAvgL: Swift.Int
    final public var fatigueLevel: Swift.Int
    final public var stabilityAvgR: Swift.Int
    final public var stabilityAvgL: Swift.Int
    final public var balanceAvgR: Swift.Int
    final public var walkingStepsCount: Swift.Int
    final public var walkingTime: Swift.Int
    final public var stepLengthAvg: Swift.Double
    final public var proportionContactTimeAvgR: Swift.Int
    final public var proportionContactTimeAvgL: Swift.Int
    final public var proportionSwingTimeAvgR: Swift.Int
    final public var proportionSwingTimeAvgL: Swift.Int
    final public var proportionDoubleFlightTimeAvg: Swift.Int
    final public var balanceR: Swift.Double
    final public var balanceL: Swift.Double
    final public var paceAvg: Swift.Double
    final public var calories: Swift.Double
    final public var stepsCountWalk: Swift.Int
    required public init?(map: ZTCoreKit.ZTMap)
    final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers final public class ZTSportSegmentData : ZTCoreKit.ZTSegmentData {
  @objc deinit
}
extension ZTSportKit.ZTSportSegmentData {
  final public var description: Swift.String {
    get
  }
}
final public class ZTSpeedCadenceAnalysis : ZTCoreKit.ZTMappable {
  final public var averageSpeed: Swift.Double
  final public var averageCadence: Swift.Double
  final public var recommendations: [Swift.String]?
  final public var charts: [ZTSportKit.ZTSpeedCadenceAnalysis.Chart]?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  final public class Chart : ZTCoreKit.ZTMappable {
    final public var timestamp: Foundation.Date?
    final public var activitySpeedAvg: Swift.Double
    final public var cadenceAvg: Swift.Double
    required public init?(map: ZTCoreKit.ZTMap)
    final public func mapping(map: ZTCoreKit.ZTMap)
    @objc deinit
  }
  @objc deinit
}
final public class ZTStrideQualityIndex : ZTCoreKit.ZTMappable {
  final public var index: Swift.Double
  final public var bucket: Swift.Int
  final public var comment: Swift.String
  final public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
extension ZTSportKit.ZTSport {
  final public func getMapRouteData(activityId: Swift.String, completion: @escaping (([Swift.String : Any]?, Foundation.Data?, Swift.Error?) -> Swift.Void))
  final public func getSegmentDetails(activityId: Swift.String, segmentId: Swift.String, completion: @escaping ((ZTSportKit.ZTActivityRunAnalysis?, Swift.Error?) -> Swift.Void))
  final public func getSegmentDetails(activityId: Swift.String, segmentId: Swift.String, completion: @escaping (([Swift.String : Any]?, Foundation.Data?, Swift.Error?) -> Swift.Void))
  final public func getActivitySummary(id: Swift.String, fields: [ZTSportKit.ZTSportActivity.Field] = [], include: [Swift.String]? = nil, completion: @escaping (ZTCoreKit.ZTResultObject<ZTSportKit.ZTSportActivitySummary>))
  final public func getActivitiesSummary(code: Swift.String?, offset: Swift.Int, limit: Swift.Int, fields: [ZTSportKit.ZTSportActivity.Field] = [], include: [Swift.String]? = nil, whereOptions: [Swift.String : Any]? = nil, duration: [Swift.String : Any]? = nil, start: Foundation.Date? = nil, end: Foundation.Date? = nil, completion: @escaping (ZTCoreKit.ZTResultArray<ZTSportKit.ZTSportActivitySummary>))
  final public func getActivitySummary(id: Swift.String, fields: [Swift.String] = [], include: [Swift.String]? = nil, whereOptions: [Swift.String : Any]? = nil, duration: [Swift.String : Any]? = nil, start: Foundation.Date? = nil, end: Foundation.Date? = nil, completion: @escaping (ZTCoreKit.ZTResultObject<ZTSportKit.ZTSportActivitySummary>))
  final public func getActivitiesSummary(code: Swift.String?, offset: Swift.Int, limit: Swift.Int, fields: [Swift.String], include: [Swift.String]? = nil, whereOptions: [Swift.String : Any]? = nil, duration: [Swift.String : Any]? = nil, start: Foundation.Date? = nil, end: Foundation.Date? = nil, completion: @escaping (ZTCoreKit.ZTResultArray<ZTSportKit.ZTSportActivitySummary>))
  final public func addActivityData(timestamp: Foundation.TimeInterval, data: [Any], completion: @escaping (ZTCoreKit.ZTBaseResult))
  final public func getActivityTimelineRollup(start: Foundation.Date, end: Foundation.Date, completion: @escaping (ZTCoreKit.ZTResultObject<ZTSportKit.ZTTimelineRollup>))
  final public func getActivityRunAnalysis(activityId: Swift.String, completion: @escaping (ZTCoreKit.ZTResultObject<ZTSportKit.ZTActivityRunAnalysis>))
  final public func getPeriodActivityAnalysis(code: Swift.String?, period: ZTCoreKit.ZTPeriod, completion: @escaping (ZTCoreKit.ZTResultObject<ZTSportKit.ZTActivityAnalysis>))
  final public func getAnalysisSqiOptimisation(activityId: Swift.String, completion: @escaping (([Swift.String : Any]?, Swift.Error?) -> Swift.Void))
}
public class ZTSymmetryAnalysis : ZTCoreKit.ZTMappable {
  public var symmetry: Swift.Double
  public var bucket: Swift.Int
  public var balanceLeft: Swift.Double?
  public var balanceRight: Swift.Double?
  public var balanceDiff: Swift.Double?
  public var balanceFavoredFoot: Swift.String
  public var recommendations: [Swift.String]?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public class ZTTimelineRollup : ZTCoreKit.ZTMappable {
  public var joinDate: Foundation.Date?
  public var total: Swift.Int
  public var totalDistance: Swift.Int
  public var avgDistance: Swift.Int
  public var avgPace: Swift.Double
  public var start: Foundation.Date?
  public var end: Foundation.Date?
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
public class ZTTrendValueData<T> : ZTCoreKit.ZTMappable {
  public var value: T?
  public var trend: Swift.Int
  required public init?(map: ZTCoreKit.ZTMap)
  public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
extension ZTSportKit.ZTSport {
  public enum ActivityGoal : Swift.String, Swift.Codable {
    case distance
    case duration
    case phoneless
    case noTarget
    case coaching
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RawDataFlowState : Swift.String, Swift.Codable {
    case prepareRightModule
    case startRightModule
    case endRightModule
    case disconnectRightModule
    case startPeerConnection
    case connectLeftModule
    case prepareLeftModule
    case startLeftModule
    case endLeftModule
    case disconnectLeftModule
    case reconnectRightmodule
    case uploadData
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public typealias ZTActivityResult = (Swift.String?, ZTCoreKit.ZTError?) -> Swift.Void
@_hasMissingDesignatedInitializers final public class ZTSport {
  public static let version: Swift.String
  public static let activityPluginVersion: Swift.String
  public static let shared: ZTSportKit.ZTSport
  final public var connectedDevice: ZTCoreKit.ZTDevice? {
    get
  }
  final public var isActivityRunning: Swift.Bool? {
    get
  }
  final public var currentActivity: ZTSportKit.ZTSportActivity? {
    get
  }
  final public var lastSerialNumber: Swift.String? {
    get
  }
  final public var currentMode: ZTCoreKit.ZTActivityMode? {
    get
  }
  final public let onActivityStateChange: ZTCoreKit.ZTSignal<(Swift.String?, ZTCoreKit.ZTDeviceActualState, Swift.Error?)>
  final public let onActivityStopped: ZTCoreKit.ZTSignal<(Swift.String?, ZTCoreKit.ZTDeviceActualState, Swift.Error?)>
  final public let onActivityDataReceived: ZTCoreKit.ZTSignal<(Foundation.Data?)>
  final public let onActivityRestoreStarted: ZTCoreKit.ZTSignal<(Swift.Bool)>
  final public let onActivityStopRequestSent: ZTCoreKit.ZTSignal<(Swift.String?, Swift.Error?)>
  final public let onRawDataFlowStateChange: ZTCoreKit.ZTSignal<(ZTSportKit.ZTSport.RawDataFlowState?, Swift.Error?)>
  final public let onRawDataFlowProgresss: ZTCoreKit.ZTSignal<(Swift.Float)>
  final public func readGeneralState(completion: @escaping ((ZTCoreKit.ZTDeviceActualState?) -> Swift.Void))
  final public func setMode(mode: ZTCoreKit.ZTActivityMode, completion: @escaping ZTCoreKit.ZTBaseResult)
  final public func forceStop(completion: @escaping (Swift.Bool, ZTCoreKit.ZTError?) -> Swift.Void)
  @objc deinit
}
extension ZTSportKit.ZTAnalysisContactQualityType : Swift.Equatable {}
extension ZTSportKit.ZTAnalysisContactQualityType : Swift.Hashable {}
extension ZTSportKit.ZTAnalysisContactQualityType : Swift.RawRepresentable {}
extension ZTSportKit.ZTAnalysisImpactForce.ImpactForceType : Swift.Equatable {}
extension ZTSportKit.ZTAnalysisImpactForce.ImpactForceType : Swift.Hashable {}
extension ZTSportKit.ZTAnalysisImpactForce.ImpactForceType : Swift.RawRepresentable {}
extension ZTSportKit.ZTAnalysisPronationType : Swift.Equatable {}
extension ZTSportKit.ZTAnalysisPronationType : Swift.Hashable {}
extension ZTSportKit.ZTAnalysisPronationType : Swift.RawRepresentable {}
extension ZTSportKit.ZTAnalysisPropulsionType : Swift.Equatable {}
extension ZTSportKit.ZTAnalysisPropulsionType : Swift.Hashable {}
extension ZTSportKit.ZTAnalysisPropulsionType : Swift.RawRepresentable {}
extension ZTSportKit.ZTAnalysisStrikePattern.StrikePatternType : Swift.Equatable {}
extension ZTSportKit.ZTAnalysisStrikePattern.StrikePatternType : Swift.Hashable {}
extension ZTSportKit.ZTAnalysisStrikePattern.StrikePatternType : Swift.RawRepresentable {}
extension ZTSportKit.ZTSportActivity.Field : Swift.Equatable {}
extension ZTSportKit.ZTSportActivity.Field : Swift.Hashable {}
extension ZTSportKit.ZTSportActivity.Field : Swift.RawRepresentable {}
extension ZTSportKit.ZTSport.ActivityGoal : Swift.Equatable {}
extension ZTSportKit.ZTSport.ActivityGoal : Swift.Hashable {}
extension ZTSportKit.ZTSport.ActivityGoal : Swift.RawRepresentable {}
extension ZTSportKit.ZTSport.RawDataFlowState : Swift.Equatable {}
extension ZTSportKit.ZTSport.RawDataFlowState : Swift.Hashable {}
extension ZTSportKit.ZTSport.RawDataFlowState : Swift.RawRepresentable {}
